install.packages("vcd")
install.packages("gimnet")
install.packages("survival")
install.packages("caret")
install.packages("R Markdown")
install.packages("xtable")
install.packages("data.table")
install.packages("manipulate")
install.packages("markdown")
install.packages("R Markdown")
install.packages("gtable")
install.packages("bootstrap")
install.packages("swirl")
install.packages("jackknife")
install.packages("readr")
install.packages("readxl")
install.packages("haven")
install.packages("installr")
install.packages("knitr")
install.packages("pwr")
install.packages("googlesheets")
install.packages("mi")
install.packages("ctv")
install.packages("matrixStats")
install.packages("UsingR")
install.packages("VIF")
install.packages("purrr")
install.packages("rmarkdown")
install.packages(c("chron", "class", "crayon", "curl", "httr", "jsonlite", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "rJava", "scales", "SparseM", "spatial", "stringi"))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass(carats)")
g = g + ylab("Price (in $)")
g = g + geom_point(size = 6, colour = "black", alpha= 0.2 )
g = g + geom_point( size = 5, colour = "blue", alpha= 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit2 <- lm(price ~ I(carat - mean(carat), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3<- lm(price ~ I(carat*10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2]* newx
predict(fit, newdata = data.frame(carat = newx))
library(swirl)
swirl()
lm(Fertility ~ ., data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
lm(Fertility ~ agriculture)
lm(Fertility ~ agriculture, data = swiss)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
?makelms
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data = swiss)
coef(efit - all)
coef(efit) - coef(all)
all$coefficients - efit$coefficients
library(swirl)
swirl()
detach("package:swirl", unload=TRUE)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library
library(dplyr)
package_version("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size> 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
regr_line <- lm(y~x)
coef(regr_line)
slope <- .5*1/.5
slope
n_quiz1 <- 1.5
n_quiz2 <- 0.4 * n_quiz1
n_quiz2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
ans <- (8.58- m)/s
ans
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x)
coef(regr_line)
mean(x)
?require
library(datasets); data(swiss)
require(dplyr)
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
fit <- lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
library(swirl)
swirl()
lm(child ~ parent, data = galton)
fit <- lm(formula = child ~ parent, data = galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(rhs, lhs)
varChild <- var(children, galton)
varChild <- var(child, galton)
varChild <- var(fit)
?var
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
efit$residuals
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(dplyr)
library(data.table)
col_names <- colnames(uci_final)
data("mtcars")
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c('-auto','-manual')
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)$coef[3,1]
install.packages("packrat")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destFile <- tempfile()
download.file(fileURL, destFile, method = "curl")
data <- read.csv(destFile, header = T)
## ACR == 3 - lot size of 10 or more acres
## AGS == 6 - $10000+ of Sales of Agricultural sales
## Creating logical vector
agricultureLogical <- with(data, ACR == 3 & AGS ==6)
## first 3 values of which on that vector
which(agricultureLogical)[1:3]
### ANSWER 1. [1] 125 238 262
### QUESTION 2. Use the parameter native=TRUE to read img file with jpeg package. What are the 30th and 80th quantiles of the resulting data? (some Linux systems may produce an answer 638 different for the 30th quantile)
library(jpeg)
install.packages("jpeg")
library(jpeg)
imgURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
imgFile <- tempfile()
download.file(imgURL, imgFile, method = "curl")
## Read file
img <- readJPEG(imgFile, native = TRUE)
## Get quantiles at 30% and 80%
quantile(img, probs = c(0.3, 0.8))
gdpURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
eduURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gdpFile <- tempfile()
eduFile <- tempfile()
download.file(gdpURL, gdpFile, method = "curl")
download.file(eduURL, eduFile, method = "curl")
## Read 190 ranked countries
gdpData <- read.csv(gdpFile, skip = 5, nrows = 190, stringsAsFactors = F, header = F)
eduData <- read.csv(eduFile, stringsAsFactors = F)
## Subset only needed data, name columns in gdpData and convert GDP Value to numeric
gdpData <- gdpData[, c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
gdpData$GDP.Value <- as.numeric(gsub(",", "", gdpData$GDP.Value))
## Merge data by country codes
matchedData <- merge(gdpData, eduData, by.x = "CountryCode", by.y = "CountryCode")
## Number of matched countries
dim(matchedData)[1]
data("mtcars")
names(mtcars) <- c( "MPG", "cylinders","displace", "horsepower", "axratio", "weight", "quarttime", "vs", "transtype", "gears", "ncarbs")
mtcars$transtype <- factor(mtcars$transtype)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
levels(mtcars$transtype) <- c("automatic", "manual")
shapiro.test(mtcars$MPG)
t.test(mtcars$MPG ~ mtcars$transtype)
### Models
fit <- lm(MPG ~ mtcars$transtype, data = mtcars)
summary(fit)
fitfull <- lm(MPG ~ ., data = mtcars)
fitreduct <- step(fitfull, direction = "backward", k = 2, trace = 0)
fitiact <- lm(MPG ~ weight + quarttime + transtype + weight*transtype, data = mtcars)
summary(fitreduct)
summary(fitiact)
anova(fitreduct, fitiact)
suppressMessages(library(lmtest))
summary(fitreduct)$adj.r.squared
summary(fitiact)$adj.r.squared
lrtest(fitreduct,fitiact)
library(car)
vif(fitreduct)
vif(fitiact)
``` {r, message=FALSE}
install.packages(c("caret", "coda", "foreach", "HistData", "iterators", "lme4", "matrixStats", "mgcv", "packrat", "readr", "rmarkdown", "RMySQL", "stringi", "testthat"))
library(RMySQL)
ucscDB <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB);
result
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
t.test(x, y, paired = TRUE)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(3, 5,.5) - pbinom(2,5,.5)
ppois(10, 1787*1/100)
se <- sqrt((8*1.5^2+8*1.8^2)/16*(1/9+1/9))
z <- (-3 + 1)/se
pvalue <- pnorm(z)*2
pvalue
power.t.test(n = 100, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$power
power.t.test(power = .9, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$n
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
(10+1)/36
1-(2+1)/36
deck
4/52
52
4/52
0
12/52
2/52
2/50
2/12
2/51
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr*dice_high
ex2_fair <- sum(dice_fair* dice_sqr)
install.packages("devtools")
devtools::install_github("ismayc/rticles")
install.packages("rio")
install.packages("psych")
install.packages("sqldf")
install.packages("quantmod")
install.packages("rvest")
install.packages("reshape2")
install.packages("zoo")
install.packages("editR")
install.packages("DT")
install.packages("googleVis")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("plotly")
install.packages("RColorBrewer")
install.packages("plotly")
install.packages("leaflet")
install.packages("rga")
install.packages("RGA")
install.packages("RSiteCatalyst")
install.packages("roxygen2")
install.packages("openxlsx")
wage_data <- read.csv("~/OneDrive/Coursera/Classes/Econometrics/Quiz2_environ/Dataset2.csv", stringsAsFactors=FALSE)
attach(wage_data)
library(dplyr)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
install.packages(c("ggplot2", "Hmisc", "matrixStats", "mgcv", "plotly", "RcppArmadillo", "rmarkdown"))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
View(cachemean)
## Part 2
6*28.50
dot_2013_1 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2013_1.csv")
View(dot_2013_1)
atttach(dot_2013_1)
attach(dot_2013_1)
as.numeric(da_04)
dot_2013_1 <- as.numeric(da_04)
dot_2013_1 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2013_1.csv")
View(dot_2013_1)
dot_2013_1 <- as.numeric(da_04)
dot_2013_1 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2013_1.csv"
dot_2013_1 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2013_1.csv"
dot_2013_1 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2013_1.csv")
da_04 <- as.numeric(da_04)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
ls
debug(ls)
ls
dot_2012 <- read.csv("~/Dropbox/Moose Analytics/LACDAT Predictive Models Team/Models/dot_2012.csv")
View(dot_2012)
dot_2012$X <- NULL
dot_2012 <- transform(dot_2012, mm_02 = WORK_DATE == 04-02-2012 | HOURS == 0)
dot_2012$mm_02 <- as.numeric(dot_2012$mm_02)
str(dot_2012)
dot_2012$EMPLOYEE_ID < as.numeric(dot_2012$EMPLOYEE_ID)
dot_2012$EMPLOYEE_ID < as.factor(dot_2012$EMPLOYEE_ID)
str(dot_2012)
dot_2012$EMPLOYEE_ID < as.factor(dot_2012$EMPLOYEE_ID)
dot_2012$EMPLOYEE_ID < factor(dot_2012$EMPLOYEE_ID)
dot_2012$EMPLOYEE_ID <- factor(dot_2012$EMPLOYEE_ID)
str(dot_2012)
dot_2012$WORK_DATE <- as.Date.factor(dot_2012$WORK_DATE)
dot_2012$WORK_DATE <- as.Date(dot_2012$WORK_DATE)
dot_2012$WORK_DATE <- as.character.Date(dot_2012$WORK_DATE)
dot_2012$WORK_DATE <- as.POSIXct("12-19-2011", format= "%m-%d-%Y")
str(dot_2012)
install.packages(c("BH", "caret", "curl", "devtools", "digest", "htmltools", "httr", "knitr", "latticeExtra", "lme4", "memoise", "mgcv", "nlme", "nnet", "pbkrtest", "purrr", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RGA", "rio", "rJava", "rmarkdown", "RMySQL", "RSiteCatalyst", "rstudioapi", "shiny", "tidyr", "viridis", "xtable"))
qt(.975,30)
install.packages(c("curl", "evaluate", "formatR", "ggplot2", "gridExtra", "gtable", "Hmisc", "htmlwidgets", "leaflet", "lme4", "mnormt", "munsell", "openssl", "purrr", "quantreg", "RcppEigen", "RCurl", "readODS", "rmarkdown", "scales", "shiny", "viridis", "XML"))
install.packages("viridis")
SCC <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/Source_Classification_Code.rds")
NEI <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/Source_Classification_Code.rds")
NEI$year <- factor(NEI$year, levels=c('1999', '2002', '2005', '2008'))
subset <- neiData[neiData$fips == "24510"|neiData$fips == "06037", ]
# if (!"load_data.R" %in% list.files()) {
#     setwd("~/Desktop/Online Coursera/Coursera-Exploratory-Data-Analysis/ExData_Plotting2/")
# }
# source("load_data.R")
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot6.png",
width = 480, height = 480,
units = "px", bg = "transparent")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot6.png",
width = 480, height = 480,
units = "px", bg = "transparent")
motor <- grep("motor", SCC$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- SCC[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
library(RColorBrewer)
nei = readRDS("summarySCC_PM25.rds")
NEI <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/Source_Classification_Code.rds")
NEI$year <- factor(NEI$year, levels=c('1999', '2002', '2005', '2008'))
# Baltimore City, Maryland
# Los Angeles County, California
MD.onroad <- subset(NEI, fips == '24510' & type == 'ON-ROAD')
CA.onroad <- subset(NEI, fips == '06037' & type == 'ON-ROAD')
# Aggregate
MD.DF <- aggregate(MD.onroad[, 'Emissions'], by=list(MD.onroad$year), sum)
colnames(MD.DF) <- c('year', 'Emissions')
MD.DF$City <- paste(rep('MD', 4))
CA.DF <- aggregate(CA.onroad[, 'Emissions'], by=list(CA.onroad$year), sum)
colnames(CA.DF) <- c('year', 'Emissions')
CA.DF$City <- paste(rep('CA', 4))
DF <- as.data.frame(rbind(MD.DF, CA.DF))
# Compare emissions from motor vehicle sources in Baltimore City with emissions from motor vehicle sources
# in Los Angeles County, California (fips == 06037). Which city has seen greater changes over time
# in motor vehicle emissions?
# Generate the graph in the same directory as the source code
quartz()
png(filename='~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/plot 6.png')
ggplot(data=DF, aes(x=year, y=Emissions)) + geom_bar(aes(fill=year)) + guides(fill=F) +
ggtitle('Total Emissions of Motor Vehicle Sources\nLos Angeles County, California vs. Baltimore City, Maryland') +
ylab(expression('PM'[2.5])) + xlab('Year') + theme(legend.position='none') + facet_grid(. ~ City) +
geom_text(aes(label=round(Emissions,0), size=1, hjust=0.5, vjust=-1))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
DF <- as.data.frame(rbind(MD.DF, CA.DF))
# Compare emissions from motor vehicle sources in Baltimore City with emissions from motor vehicle sources
# in Los Angeles County, California (fips == 06037). Which city has seen greater changes over time
# in motor vehicle emissions?
# Generate the graph in the same directory as the source code
quartz()
png(filename='~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/plot 6.png')
ggplot(data=DF, aes(x=year, y=Emissions)) + geom_bar(aes(fill=year)) + guides(fill=F) +
ggtitle('Total Emissions of Motor Vehicle Sources\nLos Angeles County, California vs. Baltimore City, Maryland') +
ylab(expression('PM'[2.5])) + xlab('Year') + theme(legend.position='none') + facet_grid(. ~ City) +
geom_text(aes(label=round(Emissions,0), size=1, hjust=0.5, vjust=-1))
dev.off()
NEI <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 2/exdata-data-NEI_data/Source_Classification_Code.rds")
## subset data frame with vehicle related data
vehdata <- SCC[grep("Vehicles", SCC$EI.Sector), ]
## get vehicle related SCC codes
SCCvehicles <- as.vector(vehdata$SCC)
## subset emission data for Baltimore using vehicle related SCC codes
BCpm99vehicles <- subset(NEI, year == 1999 & SCC %in% SCCvehicles & fips == 24510, select = Emissions)
BCpm02vehicles <- subset(NEI, year == 2002 & SCC %in% SCCvehicles & fips == 24510, select = Emissions)
BCpm05vehicles <- subset(NEI, year == 2005 & SCC %in% SCCvehicles & fips == 24510, select = Emissions)
BCpm08vehicles <- subset(NEI, year == 2008 & SCC %in% SCCvehicles & fips == 24510, select = Emissions)
# print boxplot to png file
png(file = "plot5.png")
barplot(c(mean(BCpm99vehicles$Emissions),
mean(BCpm02vehicles$Emissions),
mean(BCpm05vehicles$Emissions),
mean(BCpm08vehicles$Emissions)),
names = c("1999","2002","2005","2008"),
ylab = "pm2.5 Emissions",
main = "Emissions from Vehicls Sources, Baltimore")
dev.off()
quartz()
png(file = "plot5.png")
barplot(c(mean(BCpm99vehicles$Emissions),
mean(BCpm02vehicles$Emissions),
mean(BCpm05vehicles$Emissions),
mean(BCpm08vehicles$Emissions)),
names = c("1999","2002","2005","2008"),
ylab = "pm2.5 Emissions",
main = "Emissions from Vehicls Sources, Baltimore")
dev.off()
setwd("~/GitHub/RepData_PeerAssessment1")
setwd("~/GitHub/RepData_PeerAssessment1")
